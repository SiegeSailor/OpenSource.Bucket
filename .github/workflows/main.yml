name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:4.2.0
        ports:
          - 4566:4566
          - 4510-4559:4510-4559
        env:
          ACTIVATE_PRO: 0
          DEBUG: 1
          DOCKER_HOST: unix:///var/run/docker.sock
          DOCKER_SOCK: /var/run/docker.sock
          EXTERNAL_SERVICE_PORTS_END: 4559
          EXTERNAL_SERVICE_PORTS_START: 4510
          GATEWAY_LISTEN: 0.0.0.0:4566
          LOG_LICENSE_ISSUES: 0
          LS_LOG: info
          PERSISTENCE: 1
          SERVICES: s3,logs
          SNAPSHOT_FLUSH_INTERVAL: 15
          SNAPSHOT_LOAD_STRATEGY: ON_REQUESTED
          SNAPSHOT_SAVE_STRATEGY: SCHEDULED

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image
        run: >
          docker build \
            --tag "file-service:testing" \
            .
      - name: Run Docker container to test
        run: >
          docker run --rm \
            --env AWS_ACCESS_KEY_ID="dummy" \
            --env AWS_ACCOUNT_ID="000000000000" \
            --env AWS_CLOUDWATCH_LOGS_ENDPOINT="http://localhost:4566" \
            --env AWS_CLOUDWATCH_LOGS_LOG_GROUP="file-service" \
            --env AWS_DEFAULT_REGION="us-east-1" \
            --env AWS_S3_ENDPOINT="http://localhost:4566" \
            --env AWS_SECRET_ACCESS_KEY="test" \
            --env AWS_SESSION_TOKEN="test" \
            --env CORS_ORIGINS="*" \
            --env ENVIRONMENT="testing" \
            --name "file-service-testing" \
            --publish "5001:5000" \
            --volume "./test/:/test/" \
            --network host \
            file-service:testing \
            "python" "-m" "unittest" "discover" "--start-directory" "/test/"

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Deploy with Terraform
  #       run: |
  #         cd terraform
  #         terraform init
  #         terraform apply -auto-approve
